 void createAdj(vector<vector<int>>& edges, vector<pair<int, int>> adj[]){
        for(auto i:edges){
            adj[i[0]].push_back({i[1], i[2]});
        }
    }
    
    void topo(int node, vector<pair<int, int>> adj[], vector<bool>& vis, stack<int>& st){
        vis[node]=1;
        
        for(auto i : adj[node]){
            if(!vis[i.first]){
                topo(i.first, adj, vis, st);
            }
        }
        st.push(node);
    }


    vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<pair<int, int>> adj[N];
        createAdj(edges, adj);
        vector<bool> vis(N, 0);
        stack<int> st;

        for(int i=0; i<N; i++){
            if(!vis[i]){
                topo(i, adj, vis, st);
            }
        }
        vector<int> cost(N, 1e9);
        cost[0]=0;
        while(!st.empty()){
            int node = st.top();
            st.pop();
            for(auto i:adj[node]){
                cost[i.first]=min(cost[i.first], cost[node]+i.second);
            }
        }
        for(int i=0; i<N; i++){
            if(cost[i]==1e9) cost[i]=-1;
        }
        
        return cost;
            
    }
